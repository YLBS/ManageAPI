 
1.执行SQL查询 将结果集映射到DTO
	查寻一条数据，返回 Dto
	var result= await _context.Database.GetDbConnection().QueryFirstOrDefaultAsync<Dto>(sql);
	查询多条，返回 IEnumerable<Dto>
	var result= await _context.Database.GetDbConnection().QueryAsync<Dto>(sql);
2.执行存储过程查询 
	单个结果集
	var parameters = new { 参数名称1 = 值,参数名称2 = 值.....};
	var result= await _context.Database.GetDbConnection().QueryFirstOrDefaultAsync<Dto>("存储过程名称", parameters, commandType: CommandType.StoredProcedure);
	一条数据，没有返回null
	var parameters = new { 参数名称1 = 值,参数名称2 = 值.....};
	var result= await _context.Database.GetDbConnection().QueryAsync<Dto>("存储过程名称", parameters, commandType: CommandType.StoredProcedure);
	 
	多个结果集
	 var multiReader = await _context.Database.GetDbConnection().QueryMultipleAsync("存储过程名称", parameters, commandType: CommandType.StoredProcedure);
	 // 假设第一个结果集是一个列表
	 var firstResultSet = multiReader.Read<Dto1>();
	 // 假设第二个结果集是一个分页总数
	 var count = multiReader.Read<int>().ToList().FirstOrDefault();
	 //最后关闭释放
	 multiReader.Dispose();
3.执行无结果集返回
	例如执行修改的SQL
	string sql = "UPDATE YourTable SET ColumnName = @Value WHERE ConditionColumn = @ConditionValue";
	// 参数
	var parameters = new { Value = "New Value", ConditionValue = "Condition" };
	var result= await _context.Database.GetDbConnection().ExecuteAsync(sql,parameters);
	result 为受影响行数

	例如执行添加的存储过程
	var parameters = new { Parameter1 = parameter1, Parameter2 = parameter2 };
	var result = _context.Database.GetDbConnection().Execute("存储过程名称", parameters, commandType: CommandType.StoredProcedure);
	result 为受影响行数

	若存储过程有做判断，执行语句在return后，没有执行则会返回-1

4.SQL查询返回一个总数目
	string sql=""select count(*) from tableName";
	var result = await _context.Database.GetDbConnection().QueryFirstOrDefaultAsync<int>(sql);
5.获取存储过程输出的值 out 
	例如
	var parameters = new { MemID = memId, SalerID = userId, DeptUserID = departId };
    var dynamicParams = new DynamicParameters(parameters); 
    dynamicParams.Add("Result", dbType: DbType.Boolean, direction: ParameterDirection.Output);

    var result = await _context.Database.GetDbConnection().ExecuteAsync(
        "Sales_EnableViewCompany_N", dynamicParams,
        commandType: CommandType.StoredProcedure
    );
	object outputParameterValue = dynamicParams.Get<object>("Result");
	outputParameterValue 为输出值
6.获取存储过程return值
	例如
	 var parameters = new DynamicParameters();
     parameters.Add("ReturnValue", dbType: DbType.Int32, direction: ParameterDirection.ReturnValue); //返回值
     parameters.Add("i",value:posId, dbType: DbType.Int32, direction: ParameterDirection.Input); //输入值，可以不写@符号

     await _goodjobContext.Database.GetDbConnection().ExecuteAsync("TTT", parameters, commandType: CommandType.StoredProcedure);
     int procedureReturn = parameters.Get<int>("ReturnValue");
	 procedureReturn 就是返回值


使用Dapper做自动映射，Dto里赋值的字段需要与跟数据库的查询的一致












统一 设置去电的逻辑 
1.修改 新注册不完整简历 的查询条件  
2.修改 外网导入简历管理 的查询条件，直接连表查询，提高查询效率  
3.存储过程 InsertCompleteQd 添加去电人  
4.将 Pub_UserqdRecord 的数据迁移进 Mng_CompleteQd，根据 qdResult 补充去电状态，没有去电状态的旧数据 qdType 设为999
5.更新简历表的去电状态


设置去电逻辑
1.新注册不完整简历 NewResumeList.aspx   以表 My_Resume 去左连接查询
执行存储过程 UpdateResumeIsqd 更新简历为去电  UPDATE [Goodjob].[dbo].[My_Resume] SET[IsdqStatus] = 1 WHERE MyUserID = @myuserid、
AddqdRecord 添加去电记录 	insert into [Goodjob].[dbo].[Pub_UserqdRecord]  values(@myuserid, @userid, CONVERT(varchar(100), GETDATE(), 120))


2.外网导入简历管理 ResumeListNew.aspx  以表 OuterResume_Resume 去左连接查询
执行存储过程 UpdateResumeIsqd 更新简历为去电  UPDATE [Goodjob].[dbo].[My_Resume] SET[IsdqStatus] = 1 WHERE MyUserID = @myuserid、
AddqdRecord 添加去电记录   insert into [Goodjob].[dbo].[Pub_UserqdRecord]  values(@myuserid, @userid, CONVERT(varchar(100), GETDATE(), 120))
后加的存储过程 Mng_InsertqdResult 添加记录去电结果 nsert into qdResult  (MyUserId,QdPerpleId,Result)  Values(@MyUserId,@QdPerpleId,@QdResult) 


3.简历完整度查询  ResumeComplete.aspx 以表 My_Resume 去左连接查询 查询条件为 简历id不在表 Mng_CompleteQd 的简历
执行存储过程  InsertCompleteQd  insert into Mng_CompleteQd (MyUserId,QdDate,QdType,Describe) values(@myuserid,GETDATE(),@QdType,@Describe)  
